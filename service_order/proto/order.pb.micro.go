// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order.proto

package order

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	Buy(ctx context.Context, in *BuyRequest, opts ...client.CallOption) (*Respone, error)
	Pay(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*Respone, error)
	Refund(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*Respone, error)
	GetInfo(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*Respone, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) Buy(ctx context.Context, in *BuyRequest, opts ...client.CallOption) (*Respone, error) {
	req := c.c.NewRequest(c.name, "OrderService.Buy", in)
	out := new(Respone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Pay(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*Respone, error) {
	req := c.c.NewRequest(c.name, "OrderService.Pay", in)
	out := new(Respone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Refund(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*Respone, error) {
	req := c.c.NewRequest(c.name, "OrderService.Refund", in)
	out := new(Respone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetInfo(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*Respone, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetInfo", in)
	out := new(Respone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	Buy(context.Context, *BuyRequest, *Respone) error
	Pay(context.Context, *PayRequest, *Respone) error
	Refund(context.Context, *PayRequest, *Respone) error
	GetInfo(context.Context, *InfoRequest, *Respone) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		Buy(ctx context.Context, in *BuyRequest, out *Respone) error
		Pay(ctx context.Context, in *PayRequest, out *Respone) error
		Refund(ctx context.Context, in *PayRequest, out *Respone) error
		GetInfo(ctx context.Context, in *InfoRequest, out *Respone) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) Buy(ctx context.Context, in *BuyRequest, out *Respone) error {
	return h.OrderServiceHandler.Buy(ctx, in, out)
}

func (h *orderServiceHandler) Pay(ctx context.Context, in *PayRequest, out *Respone) error {
	return h.OrderServiceHandler.Pay(ctx, in, out)
}

func (h *orderServiceHandler) Refund(ctx context.Context, in *PayRequest, out *Respone) error {
	return h.OrderServiceHandler.Refund(ctx, in, out)
}

func (h *orderServiceHandler) GetInfo(ctx context.Context, in *InfoRequest, out *Respone) error {
	return h.OrderServiceHandler.GetInfo(ctx, in, out)
}
